
# THIS FILE IS AUTOMATICALLY GENERATED BY THE build_locales.py SCRIPT. DO NOT EDIT.

from typing import Any, Callable, Literal, Protocol, overload

from service import logging

from .en import LOCALE as en
from .sv import LOCALE as sv

RESOURCES = {
    "en": en,
    "sv": sv
}

logger = logging.getLogger("i18n")

class box_terminatorTranslator(Protocol):
    @overload
    def __call__(self, key: Literal["can_terminate","enter_label_id","no_matching_labels","view_label","box_terminator:can_terminate","box_terminator:enter_label_id","box_terminator:no_matching_labels","box_terminator:view_label"]) -> str: ...

    @overload
    def __call__(self, key: Literal["can_be_terminated_in","expires_future","expires_past","box_terminator:can_be_terminated_in","box_terminator:expires_future","box_terminator:expires_past"], *, relative_time: str | int | float) -> str: ...

def __call__(self, key: str, **kwargs: Any) -> str: ...


class brandTranslator(Protocol):
    def __call__(self, key: Literal["billing_address","email","homepage_url","makerspace_name","organization_number","brand:billing_address","brand:email","brand:homepage_url","brand:makerspace_name","brand:organization_number"]) -> str: ...

class commonTranslator(Protocol):
    def __call__(self, key: Literal["todo","common:todo"]) -> str: ...

class timeTranslator(Protocol):
    @overload
    def __call__(self, key: Literal["relative_generic.now","time:relative_generic.now"]) -> str: ...

    @overload
    def __call__(self, key: Literal["relative_generic.days_ago","relative_generic.hours_ago","relative_generic.in_days","relative_generic.in_hours","relative_generic.in_minutes","relative_generic.minutes_ago","time:relative_generic.days_ago","time:relative_generic.hours_ago","time:relative_generic.in_days","time:relative_generic.in_hours","time:relative_generic.in_minutes","time:relative_generic.minutes_ago"], *, count: int) -> str: ...

    @overload
    def __call__(self, key: Literal["relative_generic.date_future","relative_generic.date_past","time:relative_generic.date_future","time:relative_generic.date_past"], *, date: str | int | float) -> str: ...

def __call__(self, key: str, **kwargs: Any) -> str: ...

@overload
def translate(key: Literal["can_terminate","enter_label_id","no_matching_labels","view_label","box_terminator:can_terminate","box_terminator:enter_label_id","box_terminator:no_matching_labels","box_terminator:view_label"]) -> str: ...


@overload
def translate(key: Literal["can_be_terminated_in","expires_future","expires_past","box_terminator:can_be_terminated_in","box_terminator:expires_future","box_terminator:expires_past"], *, relative_time: str | int | float) -> str: ...


@overload
def translate(key: Literal["billing_address","email","homepage_url","makerspace_name","organization_number","brand:billing_address","brand:email","brand:homepage_url","brand:makerspace_name","brand:organization_number"]) -> str: ...


@overload
def translate(key: Literal["todo","common:todo"]) -> str: ...


@overload
def translate(key: Literal["relative_generic.now","time:relative_generic.now"]) -> str: ...


@overload
def translate(key: Literal["relative_generic.days_ago","relative_generic.hours_ago","relative_generic.in_days","relative_generic.in_hours","relative_generic.in_minutes","relative_generic.minutes_ago","time:relative_generic.days_ago","time:relative_generic.hours_ago","time:relative_generic.in_days","time:relative_generic.in_hours","time:relative_generic.in_minutes","time:relative_generic.minutes_ago"], *, count: int) -> str: ...


@overload
def translate(key: Literal["relative_generic.date_future","relative_generic.date_past","time:relative_generic.date_future","time:relative_generic.date_past"], *, date: str | int | float) -> str: ...

def translate(key: str, *, count: int | None = None, language: Literal["en", "sv"]="en", **kwargs: Any) -> str | list[str]:
    if count is not None:
        specific_key = f"{key}_{'zero' if count == 0 else 'one' if count == 1 else 'two' if count == 2 else 'many'}"
        v: str = RESOURCES[language].get(specific_key)
        if v is None and count > 2:
            v = RESOURCES[language].get(f"{key}_many")
        if v is None:
            v = RESOURCES[language].get(f"{key}_other")
    else:
        v = RESOURCES[language].get(key)

    if v is None:
        logger.error(f"Missing translation for key: {key}")
        return key

    if kwargs:
        return v.format(count=count, **kwargs)
    return v

@overload
def translator(prefix: Literal['box_terminator']) -> box_terminatorTranslator: ...


@overload
def translator(prefix: Literal['brand']) -> brandTranslator: ...


@overload
def translator(prefix: Literal['common']) -> commonTranslator: ...


@overload
def translator(prefix: Literal['time']) -> timeTranslator: ...



def translator(prefix: str) -> Callable[..., str | list[str]]:
    def translate(key: str, **kwargs: Any) -> str | list[str]:
        return f"{prefix}:{key}"

    return translate

